package com.mycompany.booktrack;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;

import java.util.List;

public class ManageUsersController {

    @FXML private TableView<User> usersTable;
    @FXML private TableColumn<User, Integer> idColumn;
    @FXML private TableColumn<User, String> nameColumn;
    @FXML private TableColumn<User, String> emailColumn;
    @FXML private TableColumn<User, String> phoneColumn;

    @FXML private TextField nameField;
    @FXML private TextField emailField;
    @FXML private TextField phoneField;
    @FXML private TextField searchField;

    private ObservableList<User> userList = FXCollections.observableArrayList();
    private UserDAO userDao = new UserDAO();

    @FXML
    public void initialize() {
        // Setup columns in the table
        idColumn.setCellValueFactory(cellData -> cellData.getValue().getIdProperty().asObject());
        nameColumn.setCellValueFactory(cellData -> cellData.getValue().getNameProperty());
        emailColumn.setCellValueFactory(cellData -> cellData.getValue().getEmailProperty());
        phoneColumn.setCellValueFactory(cellData -> cellData.getValue().getPhoneNumberProperty());

        // Load data from database
        loadUsersFromDatabase();

        // Add a listener to populate fields when a user is selected
        usersTable.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                nameField.setText(newValue.getName());
                emailField.setText(newValue.getEmail());
                phoneField.setText(newValue.getPhoneNumber());
            }
        });

        // Add a listener to the search field to filter the users as the user types
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            filterUsers(newValue);
        });
    }

    // Method to load users from the database into the table
    private void loadUsersFromDatabase() {
        List<User> users = userDao.getAllUsers();
        userList.setAll(users);  // Update the ObservableList with data from the database
        usersTable.setItems(userList);  // Set the table's data source
    }

    // Method to filter users based on the search field
    private void filterUsers(String searchText) {
        if (searchText.isEmpty()) {
            usersTable.setItems(userList);  // Show all users if search text is empty
        } else {
            ObservableList<User> filteredList = FXCollections.observableArrayList();
            for (User user : userList) {
                if (user.getName().toLowerCase().contains(searchText.toLowerCase()) ||
                        user.getEmail().toLowerCase().contains(searchText.toLowerCase()) ||
                        user.getPhoneNumber().toLowerCase().contains(searchText.toLowerCase())) {
                    filteredList.add(user);
                }
            }
            usersTable.setItems(filteredList);  // Show filtered users
        }
    }

    @FXML
    public void handleAddUser(ActionEvent event) {
        // Get input values
        String name = nameField.getText();
        String email = emailField.getText();
        String phone = phoneField.getText();

        // Create new user and add to the database
        User newUser = new User(0, name, email, phone); // id will be generated by the DB
        boolean success = userDao.addUser(newUser);

        if (success) {
            loadUsersFromDatabase();  // Reload the data from the database
            clearFields();
        } else {
            showAlert("Error", "Failed to add user.");
        }
    }

    @FXML
    public void handleUpdateUser(ActionEvent event) {
        // Get selected user
        User selectedUser = usersTable.getSelectionModel().getSelectedItem();
        if (selectedUser != null) {
            // Ask for confirmation before updating
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Confirm Update");
            alert.setHeaderText("Are you sure you want to update this user?");
            alert.setContentText("Changes will be saved to the database.");
            if (alert.showAndWait().get() == ButtonType.OK) {
                // Update user details
                selectedUser.setName(nameField.getText());
                selectedUser.setEmail(emailField.getText());
                selectedUser.setPhoneNumber(phoneField.getText());

                // Update user in the database
                boolean success = userDao.updateUser(selectedUser);

                if (success) {
                    loadUsersFromDatabase();  // Reload the data from the database
                    clearFields();
                } else {
                    showAlert("Error", "Failed to update user.");
                }
            }
        } else {
            showAlert("Error", "Please select a user to update.");
        }
    }

    @FXML
public void handleDeleteUser(ActionEvent event) {
    // Get selected user
    User selectedUser = usersTable.getSelectionModel().getSelectedItem();
    if (selectedUser != null) {
        // Ask for confirmation before deleting
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirm Deletion");
        alert.setHeaderText("Are you sure you want to delete this user?");
        alert.setContentText("This action cannot be undone.");
        if (alert.showAndWait().get() == ButtonType.OK) {
            try {
                // Attempt to delete the user
                boolean success = userDao.deleteUser(selectedUser.getId());

                if (success) {
                    loadUsersFromDatabase(); // Reload the data from the database
                } else {
                    showAlert("Error", "Failed to delete user.");
                }
            } catch (ActiveUserException e) {
                // Handle the case where the user has active loans
                showAlert("Cannot Delete User", e.getMessage());
            }
        }
    } else {
        showAlert("Error", "Please select a user to delete.");
    }
}


    // Method to clear the input fields
    private void clearFields() {
        nameField.clear();
        emailField.clear();
        phoneField.clear();
    }

    // Method to show alert messages
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }
}